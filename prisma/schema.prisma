// Schema MySQL Multi-Tenant para Daily Control Franqueadora
// Extensão do MySQL atual com suporte para 105 escolas + departamentos

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ================================
// MULTI-TENANCY: ORGANIZAÇÕES
// ================================

model Organization {
  id          String   @id @default(uuid())
  name        String   // Nome da escola/departamento
  code        String   @unique // Código único (ex: "RFC001", "PDI001")
  type        OrganizationType
  settings    Json     @default("{}") // Configurações customizáveis
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  
  // Relacionamentos
  users       UserProfile[]
  tasks       Task[]
  passwordResets PasswordReset[] @relation("OrganizationPasswordResets")
  
  @@map("organizations")
}

enum OrganizationType {
  SCHOOL
  DEPARTMENT
}

// ================================
// USUÁRIOS COM ORGANIZAÇÃO
// ================================

model UserProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique @map("user_id")
  organizationId        String?   @map("organization_id") // Nullable para backward compatibility
  name                  String
  email                 String    @unique
  role                  Role
  isActive              Boolean   @default(true) @map("is_active")
  passwordHash          String?   @map("password_hash")
  avatarUrl             String?   @map("avatar_url")
  phone                 String?
  bio                   String?   @db.Text
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  lastLogin             DateTime? @map("last_login") @db.Timestamp(0)
  firstLoginCompleted   Boolean?  @default(false) @map("first_login_completed")
  
  // Relacionamentos
  organization          Organization? @relation(fields: [organizationId], references: [id])
  createdTasks          Task[] @relation("TaskCreator")
  assignedTasks         TaskAssignment[]
  passwordResets        PasswordReset[] @relation("UserPasswordResets")
  createdPasswordResets PasswordReset[] @relation("PasswordResetCreator")
  
  @@map("user_profiles")
}

// ================================
// TAREFAS COM ORGANIZAÇÃO
// ================================

model Task {
  id             String     @id @default(cuid())
  organizationId String?    @map("organization_id") // Nullable para backward compatibility
  title          String
  description    String?    @db.Text
  status         TaskStatus @default(PENDENTE)
  priority       Priority   @default(MEDIA)
  dueDate        DateTime?  @map("due_date") @db.Timestamp(0)
  createdBy      String     @map("created_by")
  createdAt      DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime   @updatedAt @map("updated_at") @db.Timestamp(0)
  completedAt    DateTime?  @map("completed_at") @db.Timestamp(0)
  isPrivate      Boolean?   @default(false) @map("is_private")
  
  // Relacionamentos
  organization   Organization? @relation(fields: [organizationId], references: [id])
  creator        UserProfile @relation("TaskCreator", fields: [createdBy], references: [userId])
  assignments    TaskAssignment[]
  editHistory    TaskEditHistory[]
  
  @@map("tasks")
}

model TaskAssignment {
  id     String @id @default(cuid())
  taskId String @map("task_id")
  userId String @map("user_id")
  
  // Relacionamentos
  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [userId])
  
  @@unique([taskId, userId])
  @@map("task_assignments")
}

model TaskEditHistory {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  editedBy  String   @map("edited_by")
  editedAt  DateTime @default(now()) @map("edited_at") @db.Timestamp(0)
  changes   Json
  
  // Relacionamentos
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("task_edit_history")
}

// ================================
// GERENCIAMENTO DE SENHAS
// ================================

model PasswordReset {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  newPassword    String       @map("new_password")
  createdBy      String       @map("created_by")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  isUsed         Boolean      @default(false) @map("is_used")
  
  // Relacionamentos
  user           UserProfile  @relation("UserPasswordResets", fields: [userId], references: [userId])
  creator        UserProfile  @relation("PasswordResetCreator", fields: [createdBy], references: [userId])
  organization   Organization @relation("OrganizationPasswordResets", fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  
  @@map("password_resets")
}

// ================================
// SISTEMA LEGADO (MANTER)
// ================================

model AvailableMonth {
  id          String   @id @default(cuid())
  monthValue  String   @map("month_value")
  displayName String   @map("display_name")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  
  @@map("available_months")
}

// ================================
// ENUMS EXPANDIDOS
// ================================

enum Role {
  // Super Admin (acesso total)
  super_admin
  
  // Franqueadora (roles corporativos)
  franchise_admin
  franchise_analyst
  
  // Escolas (roles existentes + novos)
  admin
  franqueado
  gerente_comercial  // NOVO
  coordenador
  supervisor_adm
  assessora_adm
  vendedor
  professor
  
  // Departamentos internos
  departamento_head
  departamento_manager
  departamento_analyst
  departamento_assistant
}

enum TaskStatus {
  PENDENTE      @map("pendente")
  EM_ANDAMENTO  @map("em_andamento")
  CONCLUIDA     @map("concluida")
  CANCELADA     @map("cancelada")
}

enum Priority {
  BAIXA   @map("baixa")
  MEDIA   @map("media")
  URGENTE @map("urgente")
}