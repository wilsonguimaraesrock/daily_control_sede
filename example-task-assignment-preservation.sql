-- EXEMPLO PR√ÅTICO: Como as atribui√ß√µes s√£o preservadas
-- Date: 2025-01-08
-- Purpose: Demonstrar com exemplo real como funciona a preserva√ß√£o

-- CEN√ÅRIO: Jo√£o Silva precisa ter seu nome alterado para Jo√£o Santos
-- PERGUNTA: Ele continuar√° vendo suas tarefas? SIM!

-- Step 1: Simular um usu√°rio antes da edi√ß√£o
SELECT 'ANTES DA EDI√á√ÉO - Usu√°rio Jo√£o Silva:' as exemplo;
SELECT 
  user_id,
  name,
  email,
  role
FROM user_profiles
WHERE name ILIKE '%silva%' OR name ILIKE '%jo√£o%'
LIMIT 1;

-- Step 2: Mostrar uma tarefa atribu√≠da a ele
SELECT 'TAREFA ATRIBU√çDA AO JO√ÉO (usando user_id):' as exemplo;
WITH joao_user AS (
  SELECT user_id FROM user_profiles WHERE name ILIKE '%silva%' OR name ILIKE '%jo√£o%' LIMIT 1
)
SELECT 
  t.id as task_id,
  t.title,
  t.assigned_users,
  -- Verificar se o Jo√£o est√° atribu√≠do
  CASE 
    WHEN ju.user_id = ANY(t.assigned_users) THEN '‚úÖ Jo√£o est√° atribu√≠do'
    ELSE '‚ùå Jo√£o n√£o est√° atribu√≠do'
  END as status_atribuicao
FROM tasks t, joao_user ju
WHERE ju.user_id = ANY(t.assigned_users)
LIMIT 1;

-- Step 3: SIMULA√á√ÉO - O que acontece quando alteramos o nome
SELECT 'SIMULA√á√ÉO - ALTERA√á√ÉO DO NOME:' as exemplo;
SELECT 
  'user_id' as campo,
  'a1b2c3d4-e5f6-7890-abcd-ef1234567890' as valor_antes,
  'a1b2c3d4-e5f6-7890-abcd-ef1234567890' as valor_depois,
  '‚úÖ NUNCA MUDA' as status
UNION ALL
SELECT 
  'name' as campo,
  'Jo√£o Silva' as valor_antes,
  'Jo√£o Santos' as valor_depois,
  'üîÑ ALTERADO' as status
UNION ALL
SELECT 
  'email' as campo,
  'joao.silva@email.com' as valor_antes,
  'joao.santos@email.com' as valor_depois,
  'üîÑ ALTERADO' as status;

-- Step 4: Demonstrar que assigned_users n√£o √© afetado
SELECT 'ATRIBUI√á√ïES AP√ìS EDI√á√ÉO:' as exemplo;
SELECT 
  'assigned_users' as campo,
  '["a1b2c3d4-e5f6-7890-abcd-ef1234567890"]' as valor_antes,
  '["a1b2c3d4-e5f6-7890-abcd-ef1234567890"]' as valor_depois,
  '‚úÖ PRESERVADO' as status;

-- Step 5: Explicar o c√≥digo da fun√ß√£o updateUser
SELECT 'C√ìDIGO DA FUN√á√ÉO updateUser:' as exemplo;
SELECT 
  'const updateData = {' as linha_1,
  '  name: sanitizeInput(name),' as linha_2,
  '  email: sanitizeInput(email),' as linha_3,
  '  role: role' as linha_4,
  '};' as linha_5,
  'user_id N√ÉO √© alterado!' as observacao;

-- Step 6: Verificar RLS policies que garantem acesso
SELECT 'POL√çTICAS RLS QUE GARANTEM ACESSO:' as exemplo;
SELECT 
  'auth.uid() = ANY(assigned_users)' as politica,
  'Usa user_id para verificar acesso' as funcionamento,
  'Preservado ap√≥s edi√ß√£o' as resultado;

-- Step 7: Teste de conectividade
SELECT 'TESTE DE CONECTIVIDADE:' as exemplo;
SELECT 
  'Usu√°rio editado' as passo_1,
  'user_id permanece igual' as passo_2,
  'assigned_users usa user_id' as passo_3,
  'RLS permite acesso' as passo_4,
  'Usu√°rio v√™ suas tarefas' as resultado_final;

-- Step 8: Casos de uso reais
SELECT 'CASOS DE USO REAIS:' as exemplo;
SELECT 
  'Mudan√ßa de nome por casamento' as caso_1,
  'Corre√ß√£o de nome com erro' as caso_2,
  'Mudan√ßa de email corporativo' as caso_3,
  'Promo√ß√£o (mudan√ßa de role)' as caso_4,
  'Atribui√ß√µes sempre preservadas' as garantia;

-- Step 9: Conclus√£o
SELECT 'CONCLUS√ÉO FINAL:' as exemplo;
SELECT 
  '‚úÖ Sistema projetado corretamente' as status,
  'user_id como chave prim√°ria imut√°vel' as design,
  'assigned_users vinculado ao user_id' as implementacao,
  'Atribui√ß√µes preservadas automaticamente' as resultado; 