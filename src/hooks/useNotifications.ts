import { useState, useEffect } from 'react';
import { useAuth } from './useAuth';
import { Task } from '@/types/task';
import { useToast } from '@/hooks/use-toast';
import React from 'react';

interface NotificationData {
  id: string;
  title: string;
  message: string;
  type: 'task_assigned' | 'task_overdue' | 'task_pending';
  taskId?: string;
  timestamp: Date;
  read: boolean;
}

/* 
 * ‚ö†Ô∏è  ATEN√á√ÉO - √ÅREA LIVRE DE ALERTS ‚ö†Ô∏è 
 * 
 * NUNCA adicionar aqui:
 * - alert() com mensagens de status
 * - console.log() de debug em produ√ß√£o
 * - Popups ou notifica√ß√µes que incomodem o usu√°rio
 * 
 * Hist√≥rico de problemas resolvidos:
 * - Removido: alert("NOTIFICA√á√ïES DESATIVADAS - useNotifications.ts")
 * - Data: 28/01/2025
 * 
 * SISTEMA COMPLETAMENTE DESABILITADO para resolver piscar da tela
 * N√ÉO REATIVAR sem implementar throttling/debouncing adequado
 */
const NOTIFICATIONS_ENABLED = false;

/**
 * üö´ HOOK DE NOTIFICA√á√ïES - TEMPORARIAMENTE DESATIVADO
 * 
 * HIST√ìRICO:
 * - Data da desativa√ß√£o: 15/01/2025
 * - Motivo: Resolu√ß√£o de problema de "piscar" na interface causado por re-renders excessivos
 * - Problema original: Sistema executava verifica√ß√µes a cada 30 minutos + real-time subscriptions
 *   causando re-renders constantes e instabilidade visual
 * 
 * SISTEMA ORIGINAL (PROBLEM√ÅTICO):
 * ‚ùå checkOverdueTasks() - verificava tarefas vencidas automaticamente
 * ‚ùå checkPendingTasks() - verificava tarefas pr√≥ximas do vencimento (30-45min antes)
 * ‚ùå Real-time subscription - monitorava mudan√ßas em tempo real via supabase
 * ‚ùå setInterval(30min) - verifica√ß√µes peri√≥dicas autom√°ticas
 * ‚ùå Toast notifications - notifica√ß√µes visuais a cada mudan√ßa
 * 
 * COMO REATIVAR COM SEGURAN√áA NO FUTURO:
 * 1. Implementar polling com intervalo M√çNIMO de 5 minutos
 * 2. Adicionar debounce nas verifica√ß√µes
 * 3. Limitar real-time subscriptions a mudan√ßas cr√≠ticas apenas
 * 4. Usar flags de feature para ativa√ß√£o gradual
 * 5. Monitorar performance durante testes
 * 
 * C√ìDIGO DE REFER√äNCIA PARA REATIVA√á√ÉO:
 * ```javascript
 * // Polling seguro (m√≠nimo 5 minutos)
 * useEffect(() => {
 *   if (!currentUser) return;
 *   
 *   const safeInterval = setInterval(() => {
 *     // Verifica√ß√µes apenas se necess√°rio
 *     if (document.hasFocus()) { // Apenas se usu√°rio ativo
 *       checkCriticalTasks(); // Fun√ß√£o simplificada
 *     }
 *   }, 300000); // 5 minutos m√≠nimo
 *   
 *   return () => clearInterval(safeInterval);
 * }, [currentUser.id]); // Depend√™ncia est√°vel
 * ```
 */
export const useNotifications = () => {
  const [notifications, setNotifications] = useState<NotificationData[]>([]);
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [isSupported, setIsSupported] = useState(false);
  const { currentUser } = useAuth();
  const { toast } = useToast();

  // üö´ SISTEMA DE NOTIFICA√á√ïES COMPLETAMENTE DESATIVADO
  // Motivo: Resolu√ß√£o de problema de piscar na tela (15/01/2025)
  // Este coment√°rio deve ser mantido para futuras refer√™ncias

  // Verificar suporte a notifica√ß√µes
  useEffect(() => {
    if ('Notification' in window) {
      setIsSupported(true);
      setPermission(Notification.permission);
    }
  }, []);

  // Solicitar permiss√£o para notifica√ß√µes
  const requestPermission = async (): Promise<boolean> => {
    if (!isSupported) return false;

    if (permission === 'granted') return true;

    const result = await Notification.requestPermission();
    setPermission(result);
    return result === 'granted';
  };

  /**
   * ‚úÖ ENVIO DE NOTIFICA√á√ïES NATIVAS - REATIVADO PARA TAREFAS
   * 
   * Fun√ß√£o reativada APENAS para notifica√ß√µes de cria√ß√£o de tarefas.
   * N√£o causa re-renders pois √© chamada apenas sob demanda (n√£o automaticamente).
   * Segura para uso pontual quando uma tarefa √© atribu√≠da ao usu√°rio.
   */
  const sendNativeNotification = (title: string, options?: NotificationOptions): Notification | null => {
    if (!isSupported || permission !== 'granted') {
      console.log('üìù Notifica√ß√£o n√£o enviada: sem permiss√£o ou suporte');
      return null;
    }

    try {
      const notification = new Notification(title, {
        icon: '/rockfeller-favicon.png',
        badge: '/rockfeller-favicon.png',
        tag: 'task-assignment', // Evita notifica√ß√µes duplicadas
        renotify: true,
        requireInteraction: false, // N√£o bloqueia o usu√°rio
        silent: false,
        ...options
      });

      // Auto-close ap√≥s 8 segundos
      setTimeout(() => {
        notification.close();
      }, 8000);

      console.log('‚úÖ Notifica√ß√£o enviada:', title);
      return notification;
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
      return null;
    }
  };

  /**
   * üö´ ADICIONAR NOTIFICA√á√ïES √Ä LISTA - DESATIVADO
   * 
   * Esta fun√ß√£o era chamada por:
   * - checkOverdueTasks() quando encontrava tarefas vencidas
   * - checkPendingTasks() quando encontrava tarefas pr√≥ximas do vencimento  
   * - Real-time subscription quando detectava mudan√ßas
   * 
   * Desativada para evitar:
   * - State updates frequentes causando re-renders
   * - Toast notifications excessivas
   * - Ac√∫mulo de notifica√ß√µes desnecess√°rias
   */
  const addNotification = (notification: Omit<NotificationData, 'id' | 'timestamp' | 'read'>) => {
    // üö´ DESATIVADO - N√£o adicionar notifica√ß√µes
    console.log('üìù Notifica√ß√£o ignorada:', notification.title); // Log para debug
    return '';
  };

  // Marcar notifica√ß√£o como lida
  const markAsRead = (id: string) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === id 
          ? { ...notification, read: true }
          : notification
      )
    );
  };

  // Marcar todas como lidas
  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notification => ({ ...notification, read: true }))
    );
  };

  // Remover notifica√ß√£o
  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(notification => notification.id !== id));
  };

  // Limpar todas as notifica√ß√µes
  const clearAllNotifications = () => {
    setNotifications([]);
  };

  /**
   * üö´ VERIFICA√á√ÉO DE TAREFAS VENCIDAS - DESATIVADO
   * 
   * FUN√á√ÉO ORIGINAL:
   * - Consultava banco para tarefas com due_date < now
   * - Filtrava por tarefas do usu√°rio atual  
   * - Criava notifica√ß√£o para cada tarefa vencida
   * - Chamada automaticamente a cada 30 minutos
   * 
   * PROBLEMA IDENTIFICADO:
   * - Query frequente ao banco de dados
   * - Loops de notifica√ß√£o para tarefas j√° vencidas h√° dias
   * - Re-renders constantes quando havia muitas tarefas vencidas
   * 
   * REATIVA√á√ÉO SEGURA:
   * - Implementar cache de tarefas j√° notificadas
   * - Limitar notifica√ß√µes a tarefas vencidas nas √∫ltimas 24h
   * - Executar apenas 1x por dia ou sob demanda
   */
  const checkOverdueTasks = async () => {
    // üö´ DESATIVADO - N√£o verificar tarefas vencidas automaticamente
    console.log('üìù Verifica√ß√£o de tarefas vencidas desativada'); // Debug
    return;
  };

  /**
   * üö´ VERIFICA√á√ÉO DE TAREFAS PR√ìXIMAS DO VENCIMENTO - DESATIVADO
   * 
   * FUN√á√ÉO ORIGINAL:
   * - Verificava tarefas com vencimento em 30-45 minutos
   * - Enviava notifica√ß√£o "vence em X minutos"
   * - Executada a cada 5 minutos para precis√£o
   * 
   * PROBLEMA IDENTIFICADO:
   * - Verifica√ß√£o muito frequente (a cada 5 minutos)
   * - M√∫ltiplas notifica√ß√µes para a mesma tarefa
   * - Re-renders constantes durante per√≠odo de 30-45 minutos antes do vencimento
   * 
   * FUNCIONALIDADE IMPLEMENTADA EM 14/01/2025 E DESATIVADA EM 15/01/2025:
   * Esta era a funcionalidade mais recente, implementada para notificar apenas 
   * 30 minutos antes do vencimento (ao inv√©s de 4 horas). Funcionou bem mas 
   * foi desativada junto com todo o sistema para resolver o piscar.
   * 
   * REATIVA√á√ÉO SEGURA:
   * - Implementar apenas para tarefas cr√≠ticas/urgentes
   * - Enviar notifica√ß√£o apenas 1x por tarefa
   * - Cache de tarefas j√° notificadas
   * - Verifica√ß√£o m√°xima de 1x por hora
   */
  const checkPendingTasks = async () => {
    // üö´ DESATIVADO - N√£o verificar tarefas pr√≥ximas do vencimento
    console.log('üìù Verifica√ß√£o de tarefas pendentes desativada'); // Debug
    return;
  };

  // ÔøΩÔøΩ MONITORAMENTO REAL-TIME DESATIVADO
  // 
  // C√ìDIGO ORIGINAL REMOVIDO:
  // useEffect(() => {
  //   if (!currentUser) return;
  //   
  //   const channel = supabase.channel('task-notifications')
  //     .on('postgres_changes', { event: '*', schema: 'public', table: 'tasks' }, 
  //       (payload) => {
  //         // L√≥gica que causava re-renders constantes
  //         addNotification({...});
  //       })
  //     .subscribe();
  //     
  //   return () => supabase.removeChannel(channel);
  // }, [currentUser]);
  //
  // PROBLEMA: 
  // - Subscription ativa reagia a TODAS as mudan√ßas na tabela tasks
  // - Gerava notifica√ß√£o para cada INSERT/UPDATE/DELETE
  // - Causava re-renders excessivos quando m√∫ltiplos usu√°rios trabalhavam simultaneamente
  //
  // SOLU√á√ÉO APLICADA:
  // - Remo√ß√£o completa do real-time monitoring
  // - Sistema agora funciona apenas com polling de 1 minuto no useTaskManager
  //
  // REATIVA√á√ÉO SEGURA:
  // - Filtrar apenas tarefas relevantes para o usu√°rio
  // - Implementar debounce de 5-10 segundos
  // - Agrupar m√∫ltiplas mudan√ßas em uma √∫nica notifica√ß√£o
  // - Usar throttling para limitar frequ√™ncia de updates

  // üö´ VERIFICA√á√ïES PERI√ìDICAS DESATIVADAS
  //
  // C√ìDIGO ORIGINAL REMOVIDO:
  // useEffect(() => {
  //   if (!currentUser) return;
  //   
  //   // Verificar imediatamente - CAUSAVA PROBLEMA
  //   checkOverdueTasks();
  //   checkPendingTasks();
  //   
  //   // Verificar a cada 30 minutos - PRINCIPAL CAUSA DO PISCAR
  //   const interval = setInterval(() => {
  //     checkOverdueTasks();
  //     checkPendingTasks();
  //   }, 30 * 60 * 1000);
  //   
  //   return () => clearInterval(interval);
  // }, [currentUser]);
  //
  // PROBLEMA IDENTIFICADO:
  // - setInterval executando verifica√ß√µes pesadas a cada 30 minutos
  // - Depend√™ncia [currentUser] causava re-cria√ß√£o do interval quando user mudava
  // - Verifica√ß√µes imediatas no mount causavam loading states conflitantes
  // - Multiple intervals rodando simultaneamente em casos edge
  //
  // SOLU√á√ÉO APLICADA:
  // - Remo√ß√£o completa das verifica√ß√µes autom√°ticas
  // - Sistema agora √© "pull-based" ao inv√©s de "push-based"
  // - Usu√°rio pode atualizar manualmente se necess√°rio
  //
  // REATIVA√á√ÉO SEGURA:
  // - Usar intervalo M√çNIMO de 5 minutos
  // - Implementar apenas se usu√°rio estiver ativo (document.hasFocus())
  // - Cache de resultados para evitar queries desnecess√°rias
  // - Implementar circuit breaker em caso de erros consecutivos

  // üö´ SOLICITA√á√ÉO AUTOM√ÅTICA DE PERMISS√ÉO DESATIVADA
  //
  // C√ìDIGO ORIGINAL REMOVIDO:
  // useEffect(() => {
  //   if (isSupported && permission === 'default') {
  //     requestPermission();
  //   }
  // }, [isSupported, permission]);
  //
  // MOTIVO DA DESATIVA√á√ÉO:
  // - N√£o era cr√≠tico para o funcionamento
  // - Pode ser solicitado sob demanda no futuro
  // - Remove uma poss√≠vel fonte de re-renders

  /**
   * ‚úÖ NOTIFICAR TAREFA ATRIBU√çDA - NOVA FUNCIONALIDADE
   * 
   * Fun√ß√£o espec√≠fica para notificar quando uma tarefa √© criada/atribu√≠da ao usu√°rio atual.
   * Chamada apenas sob demanda quando h√° uma nova atribui√ß√£o.
   * N√£o causa re-renders autom√°ticos ou verifica√ß√µes peri√≥dicas.
   */
  const notifyTaskAssigned = (taskTitle: string, creatorName?: string) => {
    if (!currentUser) return null;

    const title = 'üìã Nova Tarefa Atribu√≠da';
    const body = creatorName 
      ? `${creatorName} atribuiu a tarefa: "${taskTitle}"`
      : `Nova tarefa atribu√≠da: "${taskTitle}"`;

    return sendNativeNotification(title, {
      body,
      tag: `task-assigned-${Date.now()}`, // Tag √∫nica para evitar agrupamento
      icon: '/rockfeller-favicon.png'
    });
  };

  /**
   * ‚úÖ NOTIFICAR TAREFA CONCLU√çDA - NOVA FUNCIONALIDADE
   * 
   * Fun√ß√£o espec√≠fica para notificar o criador da tarefa quando ela √© conclu√≠da.
   * Chamada apenas quando o status muda para 'CONCLUIDA' e o usu√°rio atual n√£o √© o criador.
   * N√£o causa re-renders autom√°ticos ou verifica√ß√µes peri√≥dicas.
   */
  const notifyTaskCompleted = (taskTitle: string, completedBy?: string) => {
    if (!currentUser) return null;

    const title = '‚úÖ Tarefa Conclu√≠da';
    const body = completedBy 
      ? `${completedBy} concluiu a tarefa: "${taskTitle}"`
      : `Tarefa conclu√≠da: "${taskTitle}"`;

    return sendNativeNotification(title, {
      body,
      tag: `task-completed-${Date.now()}`, // Tag √∫nica para evitar agrupamento
      icon: '/rockfeller-favicon.png'
    });
  };

  const unreadCount = notifications.filter(n => !n.read).length;

  return {
    notifications,
    unreadCount,
    permission,
    isSupported,
    requestPermission,
    addNotification,
    markAsRead,
    markAllAsRead,
    removeNotification,
    clearAllNotifications,
    checkOverdueTasks,
    checkPendingTasks,
    // ‚úÖ Novas fun√ß√µes espec√≠ficas para notifica√ß√µes de tarefa
    notifyTaskAssigned,
    notifyTaskCompleted,
    sendNativeNotification
  };
}; 